# -*- coding: UTF-8 -*-

'''
 Module
     basic_resources.py
 Copyright
     Copyright (C) ${YEAR} Vladimir Roncevic <elektron.ronca@gmail.com>
     ${PKG} is free software: you can redistribute it and/or modify it
     under the terms of the GNU General Public License as published by the
     Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.
     ${PKG} is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
     See the GNU General Public License for more details.
     You should have received a copy of the GNU General Public License along
     with this program. If not, see <http://www.gnu.org/licenses/>.
 Info
     Defined class BasicResource with attribute(s) and method(s).
     Defined resources for CoAP service.
'''

import sys

try:
    from coapthon.resources.resource import Resource
except ImportError as ats_error_message:
    MESSAGE = '\n{0}\n{1}\n'.format(__file__, ats_error_message)
    sys.exit(MESSAGE)  # Force close python ATS ##############################

class BasicResource(Resource):
    '''
        Defined class DistPyModule with attribute(s) and method(s).
        Load a base info, create an CLI interface and run operation(s).
        It defines:

            :attributes:
                | GEN_VERBOSE - console text indicator for process-phase.
                | CONFIG - tool info file path.
                | LOG - tool log file path.
                | OPS - list of tool options.
                | logger - logger object API.
            :methods:
                | __init__ - initial constructor.
                | process - process and generate module setup.py.
                | __str__ - dunder method for DistPyModule.
    '''

    def __init__(self, name='BasicResource', coap_server=None):
        '''
            Initial constructor.

            :param name: resource name.
            :type name: <str>
            :param coap_server: CoAP server.
            :type coap_server: <CoAP object>
            :exceptions: None
        '''
        super(BasicResource, self).__init__(
            name, coap_server, visible=True,
            observable=True, allow_children=True
        )
        self.payload = 'Basic Resource'

    def render_GET(self, request):
        '''
            Renderer fir GET method.

            :param request: get request.
            :type request: <str>
            :return: basic resource.
            :rtype: <BasicResource>
            :exceptions: None
        '''
        return self

    def render_PUT(self, request):
        '''
            Renderer for PUT method.

            :param request: get request.
            :type request: <str>
            :exceptions: None
        '''
        self.payload = request.payload
        return self

    def render_POST(self, request):
        '''
            Renderer for POST method.

            :param request: get request.
            :type request: <str>
            :exceptions: None
        '''
        res = BasicResource()
        res.location_query = request.uri_query
        res.payload = request.payload
        return res

    def render_DELETE(self, request):
        '''
            Renderer for DELETE method.

            :param request: get request.
            :type request: <str>
            :exceptions: None
        '''
        return True
